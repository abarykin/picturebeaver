<?XML version="1.0"?>
<!--
PictureBeaverTree 0.1
Automatic web graphics optimizer: PNG and JPEG
https://github.com/abarykin/picturebeaver
-->
<job>
    <runtime>
        <description>PictureBeaverTree 0.3
            Automatic web graphics optimizer: PNG and JPEG
        </description>
    </runtime>
    <script language="JScript"><![CDATA[

// -i0: non-interlaced
// -nc: do not apply color type reduction
// -nb: do not apply bit depth reduction
var projectName             = 'PictureBeaverTree';
var version                 = '0.3';
var fso                     = WScript.CreateObject("Scripting.FileSystemObject");
var arguments               = WScript.Arguments;
var PNG_OPTIMIZER_FILE		= 'optipng.exe';
//var PNG_OPTIMIZER_PARAMS	= '-o3 -i0 -nc -nb -q';
var PNG_OPTIMIZER_PARAMS	= '-o3 -i0 -q';
//var GIF_OPTIMIZER_FILE    = 'gifsicle.exe';
//var GIF_OPTIMIZER_PARAMS  = '-O2 -o';
var JPEG_OPTIMIZER_FILE		= 'jpegtran.exe';
var JPEG_OPTIMIZER_PARAMS	= '-copy none -optimize';
var TEMP_FOLDER             = fso.GetSpecialFolder(2) + '/' + projectName;

if (0 === arguments.length) {
    var isGui = ('wscript.exe' == fso.GetFileName(WScript.FullName).toLowerCase());

    WScript.Echo(
            projectName + ' ' + version + '\n' +
            'Automatic web graphics optimizer: PNG, JPEG и GIF\n\n' +
            ( isGui
                    ? ( 'Drag and drop files over ' + fso.GetFileName(WScript.ScriptFullName) + '.\n\n' )
                    : ( 'Usage:\n' + '    ' + fso.GetFileName(WScript.ScriptFullName) + ' <file or folder>\n\n' )
                    ) +
            'Optimized files will be in select folder.'
    );
}
else{
    var shell = WScript.CreateObject("WScript.Shell");
    var argumentStr = "";
    for (var argIdx = 0; argIdx < arguments.length; argIdx++) {
        argumentStr = argumentStr + ' ' + arguments(argIdx);
    }

    if ('console' !== arguments(0)) {
        var title = ' -= Automatic web graphics optimizer: PNG, JPEG и GIF =-';
        shell.Run('%ComSpec% /f:on /t:1b /k title=' + title + ' & cscript /nologo "' + WScript.ScriptFullName + '" console ' + argumentStr, 1, false);
        WScript.Quit();
    }
    else{
        createFolder(TEMP_FOLDER);

        var logFile = undefined;
        var reportPath = undefined;
        var results = [];
        var errors = [];

        var ROOT_PATH = fso.GetParentFolderName(WScript.ScriptFullName);
        var BIN_PATH = ROOT_PATH + '/bin';
        var BASE_PATH = fso.GetParentFolderName(arguments(0));

        process(arguments);

        saveResults();

        fso.deleteFolder(TEMP_FOLDER, true);
    }
}

///////////////////////////////////////////////////////////////

function processFile(filePath) {
	var folderName = fso.GetParentFolderName(filePath);
	var fileName = fso.GetFileName(filePath);
	var extension = fso.GetExtensionName(filePath).toLowerCase();
	var copyPath = TEMP_FOLDER + '/' + fileName;

	switch (extension) {
		/*case 'png':
		case 'gif':
			if (('gif' == extension) && isGifAnimated(filePath)) {
				// Change src and dst with each other so dst could be placed in -o switch
				exec(GIF_OPTIMIZER_FILE, GIF_OPTIMIZER_PARAMS, copyPath, filePath);

				checkResult(filePath, copyPath);
			}
			else {
				fso.GetFile(filePath).Copy(copyPath);

				exec(PNG_OPTIMIZER_FILE, PNG_OPTIMIZER_PARAMS, copyPath);

				if ('gif' == extension) {
					fso.GetFile(copyPath).Delete();
				}

				checkResult(filePath, copyPath.replace('.gif', '.png'));
			}

			break;*/

        case 'png':
            fso.GetFile(filePath).Copy(copyPath);
            exec(PNG_OPTIMIZER_FILE, PNG_OPTIMIZER_PARAMS, copyPath);
            checkResult(filePath, copyPath);

            fso.GetFile(copyPath).Copy(filePath);
            break;

		case 'jpg':
		case 'jpeg':
			exec(JPEG_OPTIMIZER_FILE, JPEG_OPTIMIZER_PARAMS, filePath, copyPath);
			checkResult(filePath, copyPath);

			fso.GetFile(copyPath).Copy(filePath);
			break;			
	}
}

function processFolder(folderName) {
	var folder = fso.GetFolder(folderName);

	if ( 0 == (folder.Files.count + folder.SubFolders.count) ) {
		return;
	}

    if (folder.SubFolders.count > 0){
        for (var subFolders = new Enumerator(folder.SubFolders); !subFolders.atEnd(); subFolders.moveNext()) { // @todo
            var subFolder = subFolders.item();
            processFolder(subFolder);
        }
	}

    if (folder.Files.count > 0){
        for (var files = new Enumerator(folder.Files); !files.atEnd(); files.moveNext()) { // @todo
    		var file = files.item();
    		processFile(file);
        }
    }
}

function process(files) {
	for (var fileIdx = 0; fileIdx < files.length; fileIdx++) {
		var fileName = files(fileIdx);

		if (0 == fso.FolderExists(fileName)) {
			processFile(fileName);
		}
		else {
			processFolder(fileName);
		}
	}
}

function checkResult(srcPath, dstPath) {
	var srcName = fso.GetFileName(srcPath);
	var src = fso.GetFile(srcPath);

	try {
		var dst = fso.GetFile(dstPath);
	}
	catch (e) {
		src.Copy(TEMP_FOLDER + '/' + srcName);
		//reportError('Cannot optimize file ' + srcName + '.');
        //WScript.Echo(src + ' - Cannot optimize file');
		return false;
	}

	var result = {
		file	: srcPath,
		before	: src.size,
		after	: dst.size
	};

	if ( dst.size <= src.size ) {
		result.bytes = src.size - dst.size;
		result.percents = (100 - (dst.size/src.size)*100).toFixed(2);

        WScript.Echo(src + ' - ' + result.percents + '%');
	}
	else {
		result.after = src.size;
		result.bytes = 0;
		result.percents = 0;
		// Replace old file with optimized version
		dst.Delete();
		src.Copy(TEMP_FOLDER + '/' + srcName);

        WScript.Echo(src + ' - 0%');
	}
	
	results.push(result);
}

function createFolder(path)
{
	if (!fso.FolderExists(path)) {
		try {
			fso.CreateFolder(path);
		}
		catch(e) {
			reportError('Cannot create folder for optimized files.');
		}
	}
}

function exec(binary, params, srcName, dstName)
{
	var cmd = [
		BIN_PATH + '/' + binary,
		params,
		'"' + srcName + '"'
	];
	
	if (dstName !== undefined) {
		cmd.push('"' + dstName + '"');
	}
	
	cmd = cmd.join(' ');

	var proc = shell.Run(cmd, 0, true);

	// ждём завершения
	while (0 == proc.Status) {
        WScript.Sleep(100);
	}
}

function isGifAnimated(fileName) {
	var cmd = [
		BIN_PATH + '/' + GIF_OPTIMIZER_FILE,
		'-I',
		'"' + fileName + '"'
	].join(' ');

	var proc = shell.Run(cmd, 0, true);
	
	// ждём завершения
	while (0 == proc.Status) {
	     WScript.Sleep(100);
	}
		
	return (-1 === proc.StdOut.ReadAll().indexOf('.gif 1 image'));
}

function saveResults(){
    if (!results.length) {
        return true;
    }

    var totalBefore = 0;
    var totalAfter = 0;
    var totalBytes;
    var totalPercents;
    var r;

    for (var index in results) {
        r = results[index];

        totalBefore += r.before;
        totalAfter += r.after;
    }

    totalBytes = totalBefore - totalAfter;
    totalPercents = (100 - (totalAfter/totalBefore)*100).toFixed(2);

    WScript.Echo('Total size of images before compression: ' + formatSize(totalBefore) + ' KB');
    WScript.Echo('Total size of images after compression: ' + formatSize(totalAfter) + ' KB');
    WScript.Echo('Saved: ' + formatSize(totalBytes) + ' KB ('+totalPercents+'%)');
}

function formatSize(size) {
    var str = (size/1024).toFixed(2);

    if ('.' == str.charAt(str.length - 2)) {
        str += '0';
    }

    return str;
}

]]></script>
</job>